library ieee;
use ieee.std_logic_1164.all;

entity BC_traffic_light is
	port(
		-- control inputs
		ecktimer, rstcktimer, rsttime, etime, eNS, cMuxNS, cMuxP, eP, cMuxEW, eEW: in std_logic;
		-- data inputs

		-- control outputs
		s1, s45, s50, s55, s100, s105, s110, s135, s140: out std_logic
		-- data outputs
 
	);
end entity;

architecture arch_BC of BC_traffic_light  is
	signal nextState, currentState: InternalState;
begin
	-- next-state logic (combinatorial)
	begin
		nextState <= currentState;
		case currentState is
			when FECHANDO =>
				if OB='1' then
					nextState <= ABRINDO;
				elsif SF='1' then
					nextState <= FECHADO;
				end if;
			when FECHADO =>
				if CR='1' then
					nextState <= ABRINDO;
				end if;
			when ABRINDO =>
				if SA='1' then
					nextState <= ABERTO;
				end if;
			when ABERTO =>
				if CR='1' then
					nextState <= FECHANDO;
				end if;
		end case;
	end process;

	-- memory element (sequential)
	process(clk, rst) is
	begin
		if rst='1' then
			currentState <= FECHANDO; -- reset state
		elsif rising_edge(clk) then
			currentState <= nextState;
		end if;
	end process;

	-- output-logic
	MT <= "01" when currentState=ABRINDO else
			"10" when currentState=FECHANDO else
			"00";

end architecture;