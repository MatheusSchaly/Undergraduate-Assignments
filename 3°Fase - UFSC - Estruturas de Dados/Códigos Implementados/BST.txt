//! Copyright 2018 Matheus Henrique Schaly

#ifndef BINARY_TREE_H
#define BINARY_TREE_H

#include <stdexcept>
#include "array_list.h"


namespace structures {

//! BinaryTree implementation
template<typename T>
class BinaryTree {
public:
    //! Constructor
    BinaryTree() = default;

    //! Destructor
    virtual ~BinaryTree() {
        delete root;
        size_ = 0u;
    }

    //! Inserts an element
    void insert(const T& data) {
        if (empty()) {
            root = new Node(data);
        } else {
            root -> insert(data);
        }
        size_++;
    }

    //! Remvoes an element
    void remove(const T& data) {
        if (!empty()) {
            bool removed;
            removed = root -> remove(data);
            if (removed) {
                size_--;
            }
        }
    }

    //! True if tree contains the data, false otherwise
    bool contains(const T& data) const {
        if (!empty()) {
            return root -> contains(data);
        } else {
            return false;
        }
    }

    //! True is tree is empty, false otherwise
    bool empty() const {
        return size_ == 0;
    }

    //! Tree's current size
    std::size_t size() const {
        return size_;
    }

    //! Orders the elements as middle left right
    ArrayList<T> pre_order() const {
        structures::ArrayList<T> v{};
        if (!empty()) {
            root -> pre_order(v);
        }
        return v;
    }

    //! Orders the elements as left middle right
    ArrayList<T> in_order() const {
        structures::ArrayList<T> v{};
        if (!empty()) {
            root -> in_order(v);
        }
        return v;
    }

    //! Orders the elements as left right middle
    ArrayList<T> post_order() const {
        structures::ArrayList<T> v{};
        if (!empty()) {
            root -> post_order(v);
        }
        return v;
    }

private:
    struct Node {
        explicit Node(const T& data):
            data{data},
            left{nullptr},
            right{nullptr}
        {}

        T data;
        Node* left;
        Node* right;

        void insert(const T& data_) {
            Node *new_node;
            if (data_ < data) {
                if (left == nullptr) {
                    new_node = new Node(data_);
                    left = new_node;
                } else {
                    left -> insert(data_);
                }
            } else {
                if (right == nullptr) {
                    new_node = new Node(data_);
                    right = new_node;
                } else {
                    right -> insert(data_);
                }
            }
        }

        bool remove(const T& data_) {
            if (data_ == data) {
                if ((left != nullptr) && (right != nullptr)) {
                    Node *temp = right;
                    while (temp -> left != nullptr) {
                        temp = temp -> left;
                    }
                    data = temp -> data;
                    return right -> remove(data);
                } else {
                    if (right != nullptr) {
                        data = right -> data;
                        return right -> remove(data);
                    } else {
                        if (left != nullptr) {
                            data = left -> data;
                            return left -> remove(data);
                        } else {
                            delete this;
                            return true;
                        }
                    }
                }
            } else {
                if (right != nullptr && data < data_) {
                    return right -> remove(data_);
                } else if (left != nullptr && data > data_) {
                    return left -> remove(data_);
                }
            }
            return false;
        }

        bool contains(const T& data_) const {
            if (data_ == data) {
                return true;
            } else {
                if ((left != nullptr) && (data_ < data)) {
                    return left -> contains(data_);
                } else if ((right != nullptr) && (data_ > data)) {
                    return right -> contains(data_);
                }
            }
            return false;
        }

        void pre_order(ArrayList<T>& v) const {
            v.push_back(data);
            if (left != nullptr) {
                left -> pre_order(v);
            }
            if (right != nullptr) {
                right -> pre_order(v);
            }
        }

        void in_order(ArrayList<T>& v) const {
            if (left != nullptr) {
                left -> in_order(v);
            }
            v.push_back(data);
            if (right != nullptr) {
                right -> in_order(v);
            }
        }

        void post_order(ArrayList<T>& v) const {
            if (left != nullptr) {
                left -> post_order(v);
            }
            if (right != nullptr) {
                right -> post_order(v);
            }
            v.push_back(data);
        }
    };

    Node* root{nullptr};
    std::size_t size_{0u};
};

}  // namespace structures

#endif